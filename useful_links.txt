Ad Teoria Gier w Julia

https://github.com/QuantEcon/Games.jl - pakiet do Teorii Gier w języku Julia
https://quantecon.github.io/Games.jl/latest/ - dokumentacja pakietu

Ad Gambit

https://github.com/gambit/gambit - github i najlepiej korzystać z wersji tam dostępnej 
Gambit 15 i 16 mają Pythonowe bindingi przystosowane do Pythona 2.7, tutaj już jest to w wersji przystosowanej do Pythona 3

Ad Gambit Linux i problemy z tym związane

Podstawowy problem - https://github.com/gambitproject/gambit/issues/220 - jest tu też wskazane jego obejście
Zmiana wersji kompilatora GCC na starszą - https://linuxconfig.org/how-to-switch-between-multiple-gcc-and-g-compiler-versions-on-ubuntu-20-04-lts-focal-fossa

Ad symbolic operations in Julia
https://github.com/JuliaPy/SymPy.jl - aczkolwiek to właściwie Python... - co oznacza, ze jego wykorzystanie będzie wolne...
https://github.com/tomaklutfu/Symbolic.jl - dawna próba, obecnie nie funkcjonuje,
https://github.com/MasonProtter/Symbolics.jl - inna próba, aczkolwiek obecnie niefunkcjonalna...
https://github.com/symengine/SymEngine.jl/ - de facto napisane w C++

Ad convex hulls in Julia
https://github.com/JuliaPolyhedra/QHull.jl - de facto to convex hull z pythona
https://github.com/JuliaPolyhedra/Polyhedra.jl - podstawowy pakiet w Juli, ważna dla nas funkcja - convexhull
https://juliareach.github.io/LazySets.jl/release-1.11/man/convex_hulls.html - bardziej jako wskazówka, generalnie przy wielowymiarowej otoczce wypukłej i tak wykorzystywana jest Polyhedra...

Ad Markov Chains in Julia
https://julia.quantecon.org/tools_and_techniques/finite_markov.html - jako wprowadzenie + gotowa biblioteka (aczkolwiek do ekonomii ilościowej)
https://stackoverflow.com/questions/50274934/efficient-implementation-of-markov-chains-in-julia - jak sprawnie implementować łańcuch Markowa w Julii by Bogumił Kamiński
https://arxiv.org/pdf/1907.08611.pdf oraz https://mambajl.readthedocs.io/en/latest/# - s.6 - jako ciekawostka
https://www.juliabloggers.com/monte-carlo-markov-chain/  - jak ktoś chce MCMC
https://github.com/TuringLang/MCMCChains.jl - jak ktoś chce pakiet dla MCMC

Ad Poisson Process in Julia (jako ciekawostka)
https://www.juliabloggers.com/flipping-coins-in-continuous-time-the-poisson-process/
https://hpaulkeeler.com/testing-the-julia-language-with-point-process-simulations/

Ad differential equations in Julia
https://github.com/SciML/DifferentialEquations.jl
